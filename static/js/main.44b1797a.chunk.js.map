{"version":3,"sources":["recoil/store.js","recoil/hooks.js","react/EditAPIKeyDialog.react.js","react/StockSearchInput.react.js","data/useFetchStockData.js","react/App.js","reportWebVitals.js","index.js"],"names":["APIKeyAtom","atom","key","default","localStorage","getItem","useAPIKey","useRecoilValue","store","useSetAPIKey","setAPIKey","useSetRecoilState","apiKey","setItem","EditAPIKeyDialog","setKey","useState","text","setText","isShown","Pane","Dialog","title","confirmLabel","intent","hasClose","hasCancel","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","isConfirmDisabled","onConfirm","close","href","marginTop","TextInput","placeholder","onChange","e","target","value","required","StockSearchInput","q","setQ","fetchStockData","stock","ticker","toUpperCase","url","URLSearchParams","function","symbol","apikey","fetch","mode","then","response","json","useFetchStockData","width","paddingTop","paddingBottom","display","flexDirection","alignItems","Button","appearance","onClick","console","log","App","height","padding","elevation","flex","Text","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44b1797a.chunk.js","sourcesContent":["import {atom} from 'recoil';\n\nexport const APIKeyAtom = atom({\n    key: 'Store.APIKey',\n    default: localStorage.getItem('APIKey') ?? null,\n});","import * as store from './store';\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\n\nexport const useAPIKey = () => useRecoilValue(store.APIKeyAtom);\nexport const useSetAPIKey = () => {\n    const setAPIKey = useSetRecoilState(store.APIKeyAtom);\n    return (apiKey) => {\n        try {\n            setAPIKey(apiKey);\n            localStorage.setItem('APIKey', apiKey);\n        } catch {\n            // ignore\n        }\n    }\n}","import {useState} from 'react';\nimport {useAPIKey, useSetAPIKey} from '../recoil/hooks';\nimport {Pane, Dialog, TextInput} from 'evergreen-ui'\n\nexport default function EditAPIKeyDialog() {\n  const key = useAPIKey();\n  const setKey = useSetAPIKey();\n  const [text, setText] = useState(key ?? '');\n  const isShown = key == null;\n  return (\n    <Pane>\n      <Dialog\n        isShown={isShown}\n        title=\"Set an AlphaVantage API Key\"\n        confirmLabel=\"Update API Key\"\n        intent=\"success\"\n        hasClose={false}\n        hasCancel={false}\n        shouldCloseOnOverlayClick={false}\n        shouldCloseOnEscapePress={false}\n        isConfirmDisabled={text == null || text === ''}\n        onConfirm={(close) => {\n          setKey(text);\n          close();\n        }}\n      >\n      <Pane>\n      This application uses AlphaVantage to retrieve stock data and you must use your personal AlphaVantage API key.\n      This application has no backend and there's no way for us to see this :)\n      You can get your AlphaAPI Key from <a href=\"https://alphavantage.co\">here</a>.\n      </Pane>\n      <Pane marginTop={16}>\n      <TextInput\n        placeholder=\"Your API Key\"\n        onChange={e => setText(e.target.value)}\n        required={true}\n        value={text} />\n      </Pane>\n      </Dialog>\n    </Pane>\n  )\n}","import {TextInput, Button, Pane} from 'evergreen-ui';\nimport {useState} from 'react';\nimport useFetchStockData from '../data/useFetchStockData';\n\nexport default function StockSearchInput() {\n    const [q, setQ] = useState('');\n    const fetchStockData = useFetchStockData();\n    const handleChange = e => {\n        const value = e.target.value;\n        setQ(value);\n    }\n    const handleClick = () => {\n        fetchStockData(q).then(console.log);\n    }\n    return (\n        <Pane width=\"100%\" paddingTop={8} paddingBottom={8} display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\n            <TextInput value={q} onChange={handleChange} placeholder=\"Example: HDFCBANK\" width=\"100%\" />\n            <Button marginTop={4} appearance=\"primary\" onClick={handleClick}>Submit</Button>\n        </Pane>\n    );\n}","import {useAPIKey} from '../recoil/hooks';\n\nconst BASE_URI = 'https://alphavantage.co/query';\nconst FUNCTION = 'TIME_SERIES_MONTHLY';\n\nexport default function useFetchStockData() {\n    const apiKey = useAPIKey();\n    return (stock) => {\n        const ticker = `${stock}.BO`.toUpperCase();\n        const url = BASE_URI + new URLSearchParams({\n            function: FUNCTION,\n            symbol: ticker,\n            apikey: apiKey,\n        });\n        return fetch(url, {mode: 'no-cors'}).then(response => response.json());\n    }\n}","import '../css/App.css';\nimport EditAPIKeyDialog from './EditAPIKeyDialog.react';\nimport StockSearchInput from './StockSearchInput.react';\nimport {RecoilRoot} from 'recoil';\nimport {useSetAPIKey} from '../recoil/hooks';\nimport {Pane, Text, Button} from 'evergreen-ui'\n\nfunction App() {\n  const setAPIKey = useSetAPIKey();\n  return (\n    <Pane display=\"flex\" height=\"100vh\">\n      <Pane width={300} height=\"100vh\" display=\"flex\" flexDirection=\"column\" padding={16} elevation={1}>\n        <Pane flex={1}>\n          <Text>Enter a stock to plot:</Text>\n          <StockSearchInput />\n        </Pane>\n        <Button height={48} onClick={() => setAPIKey()}>Reset API Key</Button>\n      </Pane>\n      <Pane flex={1} height=\"100vh\" />\n      <EditAPIKeyDialog />\n    </Pane>\n  );\n}\n\n\nfunction AppWrapper() {\nreturn <RecoilRoot><App/></RecoilRoot>;\n}\n\nexport default AppWrapper;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './react/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}