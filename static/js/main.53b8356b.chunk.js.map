{"version":3,"sources":["recoil/store.js","recoil/hooks.js","react/EditAPIKeyDialog.react.js","react/StockSearchInput.react.js","data/useSensexData.js","data/useFetchStockData.js","data/useNormalisedData.js","react/App.js","reportWebVitals.js","index.js"],"names":["APIKeyAtom","atom","key","default","localStorage","getItem","DataAtom","StockQueryAtom","useAPIKey","useRecoilValue","store","useSetAPIKey","setAPIKey","useSetRecoilState","apiKey","setItem","EditAPIKeyDialog","setKey","useState","text","setText","isShown","Pane","Dialog","title","confirmLabel","intent","hasClose","hasCancel","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","isConfirmDisabled","onConfirm","close","href","marginTop","TextInput","placeholder","onChange","e","target","value","required","StockSearchInput","props","q","setQ","setStockQuery","width","paddingTop","paddingBottom","display","flexDirection","alignItems","Button","appearance","onClick","formatDate","d","mmyy","Date","getFullYear","getMonth","parseResponse","response","series","Error","JSON","stringify","Object","keys","map","k","date","useNormalisedData","stock","setData","fetchStockData","useCallback","ticker","toUpperCase","url","URLSearchParams","function","symbol","apikey","fetch","then","json","useFetchStockData","sensex","useMemo","dataPoint","Month","Close","console","error","stockData","setStockData","useEffect","log","firstSensexDate","s","reduce","minimumReducer","firstStockDate","cutOffDate","Math","max","cutOffSensex","filter","dateFilter","cutOffStock","p","c","min","App","data","height","padding","elevation","flex","Text","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53b8356b.chunk.js","sourcesContent":["import {atom} from 'recoil';\n\nexport const APIKeyAtom = atom({\n    key: 'Store.APIKey',\n    default: localStorage.getItem('APIKey') ?? null,\n});\n\nexport const DataAtom = atom({\n    key: 'Store.Data',\n    default: null,\n});\n\nexport const StockQueryAtom = atom({\n    key: 'Store.StockQuery',\n    default: null,\n});","import * as store from './store';\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\n\nexport const useAPIKey = () => useRecoilValue(store.APIKeyAtom);\nexport const useSetAPIKey = () => {\n    const setAPIKey = useSetRecoilState(store.APIKeyAtom);\n    return (apiKey) => {\n        try {\n            setAPIKey(apiKey);\n            localStorage.setItem('APIKey', apiKey);\n        } catch {\n            // ignore\n        }\n    }\n}\n\nexport const useData = () => useRecoilValue(store.DataAtom);\nexport const useSetData = () => useSetRecoilState(store.DataAtom);\n\nexport const useStockQuery = () => useRecoilValue(store.StockQueryAtom);\nexport const useSetStockQuery = () => useSetRecoilState(store.StockQueryAtom);","import {useState} from 'react';\nimport {useAPIKey, useSetAPIKey} from '../recoil/hooks';\nimport {Pane, Dialog, TextInput} from 'evergreen-ui'\n\nexport default function EditAPIKeyDialog() {\n  const key = useAPIKey();\n  const setKey = useSetAPIKey();\n  const [text, setText] = useState(key ?? '');\n  const isShown = key == null;\n  return (\n    <Pane>\n      <Dialog\n        isShown={isShown}\n        title=\"Set an AlphaVantage API Key\"\n        confirmLabel=\"Update API Key\"\n        intent=\"success\"\n        hasClose={false}\n        hasCancel={false}\n        shouldCloseOnOverlayClick={false}\n        shouldCloseOnEscapePress={false}\n        isConfirmDisabled={text == null || text === ''}\n        onConfirm={(close) => {\n          setKey(text);\n          close();\n        }}\n      >\n      <Pane>\n      This application uses AlphaVantage to retrieve stock data and you must use your personal AlphaVantage API key.\n      This application has no backend and there's no way for us to see this :)\n      You can get your AlphaAPI Key from <a href=\"https://alphavantage.co\">here</a>.\n      </Pane>\n      <Pane marginTop={16}>\n      <TextInput\n        placeholder=\"Your API Key\"\n        onChange={e => setText(e.target.value)}\n        required={true}\n        value={text} />\n      </Pane>\n      </Dialog>\n    </Pane>\n  )\n}","import {TextInput, Button, Pane} from 'evergreen-ui';\nimport {useState} from 'react';\nimport {useSetStockQuery} from '../recoil/hooks';\n\nexport default function StockSearchInput(props) {\n    const [q, setQ] = useState('');\n    const setStockQuery = useSetStockQuery();\n    const handleChange = e => {\n        const value = e.target.value;\n        setQ(value);\n    }\n    return (\n        <Pane width=\"100%\" paddingTop={8} paddingBottom={8} display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\n            <TextInput value={q} onChange={handleChange} placeholder=\"Example: HDFCBANK\" width=\"100%\" />\n            <Button marginTop={4} appearance=\"primary\" onClick={() => setStockQuery(q)}>Submit</Button>\n        </Pane>\n    );\n}","import sensex from '../blobs/bse';\nimport {useMemo} from 'react';\n\nexport default function useSensexData() {\n    return useMemo(() => {\n        try {\n            return sensex.map(dataPoint => ({\n                date: formatDate(dataPoint.Month),\n                close: dataPoint.Close,\n            }))\n        } catch (e) {\n            console.error(e);\n            throw new Error('Invalid sensex data in JSON');\n        }\n    }, []);\n}\n\nfunction formatDate(d) {\n    const mmyy = new Date(d);\n    return new Date(mmyy.getFullYear(), mmyy.getMonth()+1, 0);\n}","import {useAPIKey} from '../recoil/hooks';\nimport {useCallback} from 'react';\n\nconst BASE_URI = 'https://www.alphavantage.co/query?';\nconst FUNCTION = 'TIME_SERIES_MONTHLY';\n\nexport default function useFetchStockData() {\n    const apiKey = useAPIKey();\n    return useCallback((stock) => {\n        const ticker = `${stock}.BO`.toUpperCase();\n        const url = BASE_URI + new URLSearchParams({\n            function: FUNCTION,\n            symbol: ticker,\n            apikey: apiKey,\n        });\n        return fetch(url, {})\n            .then(response => response.json())\n            .then(parseResponse);\n    }, [apiKey]);\n}\n\nfunction parseResponse(response) {\n    const series = response['Monthly Time Series'];\n    if (!series) {\n        throw(new Error(`Invalid Response - ${JSON.stringify(response)}`))\n    }\n    return Object.keys(series).map(k => ({date: new Date(k), close: series[k]['4. close']}));\n}","import {useEffect, useState, useMemo} from 'react';\nimport useSensexData from './useSensexData';\nimport useFetchStockData from './useFetchStockData';\nimport {useStockQuery, useSetData} from '../recoil/hooks';\n\nexport default function useNormalisedData() {\n    const stock = useStockQuery();\n    const setData = useSetData();\n    \n    const fetchStockData = useFetchStockData();\n    const sensex = useSensexData();\n\n    const [stockData, setStockData] = useState(null);\n\n    useEffect(() => {\n        if (stock == null) {\n            return;\n        }\n        fetchStockData(stock).then(setStockData);\n    }, [fetchStockData, stock]);\n\n    return useMemo(() => {\n        if (sensex == null || stockData == null) {\n            console.log('Nothing to calculate one of sensex or stock is null');\n            return null;\n        }\n        const firstSensexDate = sensex.map(s => s.date).reduce(minimumReducer);\n        const firstStockDate = stockData.map(s => s.date).reduce(minimumReducer);\n        const cutOffDate = Math.max(firstSensexDate, firstStockDate);\n\n        const cutOffSensex = sensex.filter(dateFilter(cutOffDate));\n        const cutOffStock = stockData.filter(dateFilter(cutOffDate));\n\n        setData({\n            sensex: cutOffSensex,\n            stock: cutOffStock,\n        });\n    }, [sensex, setData, stockData]);\n}\n\nfunction minimumReducer(p, c) {\n    return Math.min(p, c);\n}\n\nfunction dateFilter(cutOffDate) {\n    return stock => stock.date >= cutOffDate\n}\n","import '../css/App.css';\nimport EditAPIKeyDialog from './EditAPIKeyDialog.react';\nimport StockSearchInput from './StockSearchInput.react';\nimport {RecoilRoot} from 'recoil';\nimport {useSetAPIKey, useData} from '../recoil/hooks';\nimport useNormalisedData from '../data/useNormalisedData';\nimport {Pane, Text, Button} from 'evergreen-ui'\n\nfunction App() {\n  useNormalisedData();\n  const setAPIKey = useSetAPIKey();\n  const data = useData();\n\n  return (\n    <Pane display=\"flex\" height=\"100vh\">\n      <Pane width={300} height=\"100vh\" display=\"flex\" flexDirection=\"column\" padding={16} elevation={1}>\n        <Pane flex={1}>\n          <Text>Enter a stock to plot:</Text>\n          <StockSearchInput />\n        </Pane>\n        <Button height={48} onClick={() => setAPIKey()}>Reset API Key</Button>\n      </Pane>\n      <Pane flex={1} height=\"100vh\">\n        <pre>\n          {JSON.stringify(data, null, 2)}\n        </pre>\n      </Pane>\n      <EditAPIKeyDialog />\n    </Pane>\n  );\n}\n\n\nfunction AppWrapper() {\nreturn <RecoilRoot><App/></RecoilRoot>;\n}\n\nexport default AppWrapper;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './react/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}